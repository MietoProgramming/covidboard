{"version":3,"sources":["Search.jsx","Stats.jsx","Country.jsx","Select.jsx","App.js","reportWebVitals.js","index.js"],"names":["Search","SetCountryName","useState","searchText","SearchText","className","value","onChange","e","target","type","placeholder","onClick","correctText","replace","toLowerCase","Stats","glob","setGlob","useEffect","fetchSummary","fetch","method","redirect","then","response","json","result","catch","error","console","log","Global","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","NewRecovered","TotalRecovered","Country","country","src","countryCode","name","active","confirmed","deaths","Select","allCountries","map","c","Slug","ISO2","App","countryName","SetCountry","SetAllCountries","SetError","fetchAllCountries","fetchCountry","r","cName","recovered","i","length","day","Active","Confirmed","Deaths","Recovered","CountryCode","SetCountryData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8eedc949.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Search = ({ SetCountryName }) => {\r\n  const [searchText, SearchText] = useState(\"\");\r\n\r\n  const onKeyType = (e) => {\r\n    SearchText(e.target.value);\r\n  };\r\n\r\n  const fixSearchText = () => {\r\n    var correctText = \"\";\r\n    correctText = searchText.replace(\" \", \"-\").toLowerCase();\r\n    SetCountryName(correctText);\r\n  }\r\n\r\n  return (\r\n    <div className=\"search\">\r\n        <input\r\n          value={searchText}\r\n          onChange={onKeyType}\r\n          type=\"text\"\r\n          className=\"search-bar\"\r\n          placeholder=\"Type the name of country\"\r\n        />\r\n        <button onClick={fixSearchText}>\r\n          <i className=\"fas fa-search\"></i>\r\n        </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst Stats = () => {\r\n  const [glob, setGlob] = useState();\r\n\r\n  useEffect(() => {\r\n    fetchSummary();\r\n  }, []);\r\n\r\n  const fetchSummary = () => {\r\n    var requestOptions = {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n    };\r\n\r\n    const result = fetch(\"https://api.covid19api.com/summary\", requestOptions)\r\n      .then((response) => response.json())\r\n      .then((result) => setGlob(result))\r\n      .catch((error) => console.log(\"error\", error));\r\n  };\r\n\r\n  if (!glob) {\r\n    return (\r\n      <div className=\"stats\">\r\n        <h1>Global stats</h1>\r\n        <h3>NewConfirmed: 0</h3>\r\n        <h3>TotalConfirmed: 0</h3>\r\n        <h3>NewDeaths: 0</h3>\r\n        <h3>TotalDeaths: 0</h3>\r\n        <h3>NewRecovered: 0</h3>\r\n        <h3>TotalRecovered: 0</h3>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"stats\">\r\n      <h1>Global stats</h1>\r\n      <h3>NewConfirmed: {glob.Global.NewConfirmed}</h3>\r\n      <h3>TotalConfirmed: {glob.Global.TotalConfirmed}</h3>\r\n      <h3>NewDeaths: {glob.Global.NewDeaths}</h3>\r\n      <h3>TotalDeaths: {glob.Global.TotalDeaths}</h3>\r\n      <h3>NewRecovered: {glob.Global.NewRecovered}</h3>\r\n      <h3>TotalRecovered: {glob.Global.TotalRecovered}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import React from 'react';\r\n\r\n\r\nconst Country = ({country}) => {\r\n    return (\r\n        <div className=\"country\">\r\n            <img src={`https://www.countryflags.io/${country.countryCode}/flat/64.png`}/>\r\n            <h1>{country.name}</h1>\r\n            <p>Active cases: {country.active}</p>\r\n            <p>Confirmed cases: {country.confirmed}</p>\r\n            <p>Deaths: {country.deaths}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Country;","import React from \"react\";\r\n\r\nconst Select = ({ allCountries, SetCountryName }) => {\r\n\r\nconst SelectedOption = (name) => {\r\n    SetCountryName(name);\r\n}\r\n\r\n  return (\r\n    <div className=\"select\">\r\n      <select onChange={(e) => SelectedOption(e.target.value)}>\r\n        {allCountries.map((c) => {\r\n          return <option key={c.ISO2,c.Slug} value={c.Slug}>{c.Country}</option>;\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Search from \"./Search.jsx\";\nimport Stats from \"./Stats.jsx\";\nimport Country from \"./Country.jsx\";\nimport Select from \"./Select.jsx\";\n\nfunction App() {\n  const [countryName, SetCountryName] = useState(\"\");\n  const [country, SetCountry] = useState({});\n  const [allCountries, SetAllCountries] = useState();\n  const [error, SetError] = useState(false);\n\n  useEffect(() => {\n    fetchAllCountries();\n  }, []);\n\n  useEffect(() => {}, [allCountries]);\n\n  useEffect(() => {\n    if (countryName !== \"\") {\n      fetchCountry(countryName);\n    }\n  }, [countryName]);\n\n  const SetCountryData = (\n    name,\n    active,\n    confirmed,\n    deaths,\n    recovered,\n    countryCode\n  ) => {\n    SetCountry({ name, active, confirmed, deaths, recovered, countryCode });\n  };\n\n  const fetchAllCountries = () => {\n    var requestOptions = {\n      method: \"GET\",\n      redirect: \"follow\",\n    };\n\n    fetch(`https://api.covid19api.com/countries`, requestOptions)\n      .then((response) => response.json())\n      .then((r) => SetAllCountries(r))\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  const fetchCountry = (cName) => {\n    if (cName !== \"\") {\n      var active = 0,\n        confirmed = 0,\n        deaths = 0,\n        recovered = 0,\n        name = \"\",\n        countryCode = \"\";\n      // const date = Date.now();\n      // console.log(\n      //   `${date.getFullYear()}-${date.getMonth()}-${date.getDay()}T${date.getHours()}:${date.getMinutes()}:${date.getMilliseconds()}`\n      // );\n      var requestOptions = {\n        method: \"GET\",\n        redirect: \"follow\",\n        // from: \"2020-01-01T00:00:00Z\",\n        // to: `${date.getFullYear}-${date.getMonth}-${date.getDay}T${date.getHours}:${date.getMinutes}:${date.getMilliseconds}`, TODO: Use in the future\n      };\n      console.log(name);\n      fetch(`https://api.covid19api.com/live/country/${cName}`, requestOptions)\n        .then((response) => response.json())\n        .then((r) => {\n          console.log(r);\n          for (var i = 0; i < r.length; i++) {\n            var day = r[i];\n            active += day.Active;\n            confirmed += day.Confirmed;\n            deaths += day.Deaths;\n            recovered += day.Recovered;\n          }\n          name = r[1].Country;\n          countryCode = r[1].CountryCode;\n          console.log(r[1]);\n          SetError(false);\n          SetCountryData(\n            name,\n            active,\n            confirmed,\n            deaths,\n            recovered,\n            countryCode\n          );\n        })\n        .catch((error) => {\n          console.log(\"error\", error);\n          SetCountry({});\n          SetError(true);\n        });\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"background\"></div>\n      <div className=\"App\">\n        <Stats />\n        <div className=\"mainBox\">\n          <Search SetCountryName={SetCountryName} />\n          {allCountries && (\n            <Select\n              allCountries={allCountries}\n              SetCountryName={SetCountryName}\n            />\n          )}\n          {error && <h1>Something went wrong! Try another country.</h1>}\n          {country.name && <Country country={country} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}